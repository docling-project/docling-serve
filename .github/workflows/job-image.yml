name: Build docling-serve container image

on:
  workflow_call:
    inputs:
      build_args:
        type: string
        description: "Extra build arguments for the build."
        default: ""
      ghcr_image_name:
        type: string
        description: "Name of the image for GHCR."
      quay_image_name:
        type: string
        description: "Name of the image Quay."
      platforms:
        type: string
        description: "Platform argument for building images."
        default: linux/amd64, linux/arm64
      publish:
        type: boolean
        description: "If true, the images will be published."
        default: false
      environment:
        type: string
        description: "GH Action environment"
        default: ""

env:
  GHCR_REGISTRY: ghcr.io
  QUAY_REGISTRY: quay.io

jobs:
  image:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    environment: ${{ inputs.environment }}

    steps:
      - name: Free up space in github runner
        # Free space as indicated here : https://github.com/actions/runner-images/issues/2840#issuecomment-790492173
        run: |
            df -h
            sudo rm -rf "/usr/local/share/boost"
            sudo rm -rf "$AGENT_TOOLSDIRECTORY"
            sudo rm -rf /usr/share/dotnet /opt/ghc /usr/local/lib/android /usr/local/share/powershell /usr/share/swift /usr/local/.ghcup
            # shellcheck disable=SC2046
            sudo docker rmi "$(docker image ls -aq)" >/dev/null 2>&1 || true
            df -h

      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to the GHCR container image registry
        if: ${{ inputs.publish }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.GHCR_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to the Quay container image registry
        if: ${{ inputs.publish }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.QUAY_REGISTRY }}
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Extract metadata (tags, labels) for docling-serve ghcr image
        id: ghcr_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.GHCR_REGISTRY }}/${{ inputs.ghcr_image_name }}

      - name: Build and push image to ghcr.io
        id: ghcr_push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ inputs.publish }} # set false for local test
          tags: ${{ steps.ghcr_meta.outputs.tags }}
          labels: ${{ steps.ghcr_meta.outputs.labels }}
          platforms: ${{ inputs.platforms}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Containerfile
          build-args: ${{ inputs.build_args }}

      - name: Generate artifact attestation
        if: ${{ inputs.publish }}
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.GHCR_REGISTRY }}/${{ inputs.ghcr_image_name }}
          subject-digest: ${{ steps.ghcr_push.outputs.digest }}
          push-to-registry: true

      - name: Extract metadata (tags, labels) for docling-serve quay image
        if: ${{ inputs.publish }}
        id: quay_meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.QUAY_REGISTRY }}/${{ inputs.quay_image_name }}

      - name: Build and push image to quay.io
        if: ${{ inputs.publish }}
        # id: push-serve-cpu-quay
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ inputs.publish }} # set false for local test
          tags: ${{ steps.quay_meta.outputs.tags }}
          labels: ${{ steps.quay_meta.outputs.labels }}
          platforms: ${{ inputs.platforms}}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          file: Containerfile
          build-args: ${{ inputs.build_args }}

      # - name: Inspect the image details
      #   run: |
      #     echo "${{ steps.ghcr_push.outputs.metadata }}"

      - name: Remove Local Docker Images
        run: |
          docker image prune -af

      # - name: Set metadata outputs for local testing, and comment out buildx, cache, metadata
      #   id: ghcr_meta
      #   run: |
      #     echo "tags=ghcr.io/docling-project/docling-serve-cpu:main" >> $GITHUB_OUTPUT
      #     echo "labels=org.opencontainers.image.source=https://github.com/docling-project/docling-serve" >> $GITHUB_OUTPUT

    outputs:
      image-tags: ${{ steps.ghcr_meta.outputs.tags }}
      image-labels: ${{ steps.ghcr_meta.outputs.labels }}

  test-cpu-image:
    needs:
      - image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test CPU images
        run: |
          set -e

          echo "Testing image: ${{ needs.image.outputs.image-tags }}"

          for tag in ${{ needs.image.outputs.image-tags }}; do
            if echo "$tag" | grep -q -- '-cpu' && echo "$tag" | grep -qE ':[vV][0-9]+(\.[0-9]+){0,2}$'; then
              echo "Testing CPU image: $tag"

              # Remove existing container if any
              docker rm -f docling-serve-test-container 2>/dev/null || true

              echo "Pulling image..."
              docker pull "$tag"

              echo "Waiting 5s after pull..."
              sleep 5

              echo "Starting container..."
              docker run -d -p 5001:5001 --name docling-serve-test-container "$tag"

              echo "Waiting 15s for container to boot..."
              sleep 15

              echo "Checking service health..."
              for i in {1..20}; do
                health_response=$(curl -s http://localhost:5001/health || true)
                echo "Health check response [$i]: $health_response"
                if echo "$health_response" | grep -q '"status":"ok"'; then
                  echo "Service is healthy!"
                  echo "Sending test conversion request..."

                  status_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST 'http://localhost:5001/v1/convert/source' \
                    -H 'accept: application/json' \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "options": {
                        "from_formats": ["pdf"],
                        "to_formats": ["md"]
                      },
                      "sources": [
                        {
                          "kind": "http",
                          "url": "https://arxiv.org/pdf/2501.17887"
                        }
                      ],
                      "target": {
                        "kind": "inbody"
                      }
                    }')

                  echo "Conversion request returned status code: $status_code"

                  if [ "$status_code" -ne 200 ]; then
                    echo "Conversion failed!"
                    docker logs docling-serve-test-container
                    docker rm -f docling-serve-test-container
                    exit 1
                  fi

                  break
                else
                  echo "Waiting for service... [$i/20]"
                  sleep 3
                fi
              done

              if ! echo "$health_response" | grep -q '"status":"ok"'; then
                echo "Service did not become healthy in time."
                docker logs docling-serve-test-container
                docker rm -f docling-serve-test-container
                exit 1
              fi

              echo "Cleaning up test container..."
              docker rm -f docling-serve-test-container
            else
              echo "Skipping non-released or non-CPU image: $tag"
            fi
          done

  test-cuda-image:
    needs:
      - image
    runs-on: ubuntu-latest # >> placeholder for GPU runner << #
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test CUDA images
        run: |
          set -e

          echo "Testing image: ${{ needs.image.outputs.image-tags }}"

          for tag in ${{ needs.image.outputs.image-tags }}; do
            if echo "$tag" | grep -qE -- '-cu[0-9]+' && echo "$tag" | grep -qE ':[vV][0-9]+(\.[0-9]+){0,2}$'; then
              echo "Testing CUDA image: $tag"

              # Remove existing container if any
              docker rm -f docling-serve-test-container 2>/dev/null || true

              echo "Pulling image..."
              docker pull "$tag"

              echo "Waiting 5s after pull..."
              sleep 5

              echo "Starting container..."
              docker run -d -p 5001:5001 --gpus all --name docling-serve-test-container "$tag"

              echo "Waiting 15s for container to boot..."
              sleep 15

              echo "Checking service health..."
              for i in {1..25}; do
                health_response=$(curl -s http://localhost:5001/health || true)
                echo "Health check response [$i]: $health_response"
                if echo "$health_response" | grep -q '"status":"ok"'; then
                  echo "Service is healthy!"
                  echo "Sending test conversion request..."

                  status_code=$(curl -s -o /dev/null -w "%{http_code}" -X POST 'http://localhost:5001/v1/convert/source' \
                    -H 'accept: application/json' \
                    -H 'Content-Type: application/json' \
                    -d '{
                      "options": {
                        "from_formats": ["pdf"],
                        "to_formats": ["md"]
                      },
                      "sources": [
                        {
                          "kind": "http",
                          "url": "https://arxiv.org/pdf/2501.17887"
                        }
                      ],
                      "target": {
                        "kind": "inbody"
                      }
                    }')

                  echo "Conversion request returned status code: $status_code"

                  if [ "$status_code" -ne 200 ]; then
                    echo "Conversion failed!"
                    docker logs docling-serve-test-container
                    docker rm -f docling-serve-test-container
                    exit 1
                  fi

                  break
                else
                  echo "Waiting for service... [$i/25]"
                  sleep 3
                fi
              done

              if ! echo "$health_response" | grep -q '"status":"ok"'; then
                echo "Service did not become healthy in time."
                docker logs docling-serve-test-container
                docker rm -f docling-serve-test-container
                exit 1
              fi

              echo "Cleaning up test container..."
              docker rm -f docling-serve-test-container
            else
              echo "Skipping non-released or non-CUDA image: $tag"
            fi
          done
