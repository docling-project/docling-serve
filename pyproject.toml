[tool.poetry]
name = "docling-serve"
version = "0.1.0"
description = "Running Docling as a service"
license = "MIT"
authors = [
    "Michele Dolfi <dol@zurich.ibm.com>",
    "Christoph Auer <cau@zurich.ibm.com>",
    "Panos Vagenas <pva@zurich.ibm.com>",
    "Cesar Berrospi Ramis <ceb@zurich.ibm.com>",
   "Peter Staar <taa@zurich.ibm.com>",
]
maintainers = [
    "Peter Staar <taa@zurich.ibm.com>",
    "Christoph Auer <cau@zurich.ibm.com>",
    "Michele Dolfi <dol@zurich.ibm.com>",
    "Cesar Berrospi Ramis <ceb@zurich.ibm.com>",
    "Panos Vagenas <pva@zurich.ibm.com>",
]
readme = "README.md"
repository = "https://github.com/DS4SD/docling-serve"
homepage = "https://github.com/DS4SD/docling-serve"
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    # "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Typing :: Typed",
    "Programming Language :: Python :: 3"
]

[tool.poetry.dependencies]
python = ">=3.10,<3.13" # 3.10 needed for Gradio, and no torchvision build for 3.13 yet
docling = "^2.14.0"
fastapi = {version = "^0.115.6", extras = ["standard"]}
gradio = { version = "^5.9.1", optional = true }
uvicorn = "~0.29.0"
pydantic = "^2.10.3"
pydantic-settings = "^2.4.0"
python-multipart = "^0.0.19"
httpx = "^0.28.1"
tesserocr = { version = "^2.7.1", optional = true }
rapidocr-onnxruntime = { version = "^1.4.0", optional = true, markers = "python_version < '3.13'" }
onnxruntime = [
  # 1.19.2 is the last version with python3.9 support,
  # see https://github.com/microsoft/onnxruntime/releases/tag/v1.20.0
  { version = ">=1.7.0,<1.20.0", optional = true, markers = "python_version < '3.10'" },
  { version = "^1.7.0", optional = true, markers = "python_version >= '3.10'" }
]


[tool.poetry.extras]
ui = ["gradio"]
tesserocr = ["tesserocr"]
rapidocr = ["rapidocr-onnxruntime", "onnxruntime"]


[tool.poetry.group.pypi-torch]
optional = false

[tool.poetry.group.pypi-torch.dependencies]
torch = [
  {version = "!=2.4.1+cpu" },
]
torchvision = [
  {version = "!=0.19.1+cpu" },
]

[tool.poetry.group.cpu]
optional = true

[tool.poetry.group.cpu.dependencies]
torch = [
    {markers = 'platform_machine=="x86_64" and sys_platform=="linux" and python_version == "3.10"', url="https://download.pytorch.org/whl/cpu/torch-2.4.1%2Bcpu-cp310-cp310-linux_x86_64.whl"},
    {markers = 'platform_machine=="x86_64" and sys_platform=="linux" and python_version == "3.11"', url="https://download.pytorch.org/whl/cpu/torch-2.4.1%2Bcpu-cp311-cp311-linux_x86_64.whl"},
    {markers = 'platform_machine=="x86_64" and sys_platform=="linux" and python_version == "3.12"', url="https://download.pytorch.org/whl/cpu/torch-2.4.1%2Bcpu-cp312-cp312-linux_x86_64.whl"},
]
torchvision = [
    {markers = 'platform_machine=="x86_64" and sys_platform=="linux" and python_version == "3.10"', url="https://download.pytorch.org/whl/cpu/torchvision-0.19.1%2Bcpu-cp310-cp310-linux_x86_64.whl"},
    {markers = 'platform_machine=="x86_64" and sys_platform=="linux" and python_version == "3.11"', url="https://download.pytorch.org/whl/cpu/torchvision-0.19.1%2Bcpu-cp311-cp311-linux_x86_64.whl"},
    {markers = 'platform_machine=="x86_64" and sys_platform=="linux" and python_version == "3.12"', url="https://download.pytorch.org/whl/cpu/torchvision-0.19.1%2Bcpu-cp312-cp312-linux_x86_64.whl"},
]

[tool.poetry.group.constraints.dependencies]
numpy = [
    { version = "^2.1.0", markers = 'python_version >= "3.13"' },
    { version = "^1.24.4", markers = 'python_version < "3.13"' },
]

[tool.poetry.group.dev.dependencies]
black = "^24.8.0"
isort = "^5.13.2"
pre-commit = "^3.8.0"
autoflake = "^2.3.1"
flake8 = "^7.1.1"
pytest = "^8.3.4"
pytest-asyncio = "^0.24.0"
pytest-check = "^2.4.1"
mypy = "^1.11.2"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ["py310"]
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 88
py_version=311

[tool.autoflake]
in-place = true
remove-all-unused-imports = true
remove-unused-variables = true
expand-star-imports = true
recursive = true

[tool.mypy]
pretty = true
# strict = true
no_implicit_optional = true
plugins = "pydantic.mypy"
python_version = "3.10"

[[tool.mypy.overrides]]
module = [
    "easyocr.*",
    "tesserocr.*",
    "rapidocr_onnxruntime.*",
    "docling_conversion.*",
    "gradio_ui.*",
    "response_preparation.*",
    "helper_functions.*",
    "requests.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
minversion = "8.2"
testpaths = [
    "tests",
]
addopts = "-rA --color=yes --tb=short --maxfail=5"
markers = [
"asyncio",
]
